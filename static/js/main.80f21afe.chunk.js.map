{"version":3,"sources":["component/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","lists","localStorage","getItem","JSON","parse","getLocalData","_useState4","items","setItems","_useState5","_useState6","isEditItem","setIsEditItem","_useState7","_useState8","toggleButton","setToggleButton","addItem","map","curElem","id","_objectSpread","name","newData","Date","getTime","toString","concat","_toConsumableArray","alert","useEffect","setItem","stringify","_jsx","_Fragment","children","className","_jsxs","type","placeholder","value","onChange","event","target","onClick","index","item_todo_edited","find","editItem","updatedItem","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"sOA8IeA,EA7HF,WACT,IAAAC,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,EAA0BL,mBAdV,WAChB,IAAMM,EAAQC,aAAaC,QAAQ,cAEnC,OAAGF,EAEQG,KAAKC,MAAMJ,GAGZ,GAMyBK,IAAeC,EAAAV,YAAAG,EAAA,GAA3CQ,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEtBG,EAAoCf,mBAAS,IAAGgB,EAAAd,YAAAa,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAAwCnB,oBAAS,GAAMoB,EAAAlB,YAAAiB,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAI9BG,EAAU,WACZ,GAAKpB,EAGA,GAAIA,GAAQkB,EACbP,EACED,EAAMW,KAAI,SAACC,GACT,OAAIA,EAAQC,KAAOT,EACjBU,wBAAA,GAAYF,GAAO,IAAEG,KAAMzB,IAEtBsB,MAIXrB,EAAQ,IACRc,EAAc,MACdI,GAAgB,OAEf,CACD,IAAMO,EAAU,CACZH,IAAI,IAAII,MAAOC,UAAUC,WACzBJ,KAAMzB,GAEVW,EAAS,GAADmB,OAAAC,YAAKrB,GAAK,CAAEgB,KACpBzB,EAAQ,SAtBR+B,MAAM,0BA+Dd,OAPAC,qBAAU,WACN7B,aAAa8B,QAAQ,aAAc5B,KAAK6B,UAAUzB,MAEnD,CAACA,IAKA0B,cAAAC,WAAA,CAAAC,SACIF,cAAA,OAAKG,UAAU,WAAUD,SACrBE,eAAA,OAAKD,UAAU,YAAWD,SAAA,CACtBF,cAAA,MAAAE,SAAI,gBACJE,eAAA,OAAKD,UAAU,WAAUD,SAAA,CACrBF,cAAA,SAAOK,KAAK,OACRC,YAAY,YAAYH,UAAU,eAClCI,MAAO3C,EACP4C,SAAU,SAACC,GACP5C,EAAQ4C,EAAMC,OAAOH,UAGxBzB,EAAiBkB,cAAA,KAAGG,UAAU,sBAAsBQ,QAAS3B,IAC5CgB,cAAA,KAAGG,UAAU,qBAAqBQ,QAAS3B,OAOrEgB,cAAA,OAAKG,UAAU,YAAWD,SACrB5B,EAAMW,KAAI,SAACC,GACR,OACIkB,eAAA,OAAKD,UAAU,WAAUD,SAAA,CACrBF,cAAA,MAAAE,SAAKhB,EAAQG,OACbe,eAAA,OAAKD,UAAU,WAAUD,SAAA,CACrBF,cAAA,KAAGG,UAAU,sBACZQ,QAAS,kBAjE7B,SAACC,GACd,IAAMC,EAAmBvC,EAAMwC,MAAK,SAAC5B,GACnC,OAAOA,EAAQC,KAAOyB,KAExB/C,EAAQgD,EAAiBxB,MACzBV,EAAciC,GACd7B,GAAgB,GA2DgCgC,CAAS7B,EAAQC,OACjCa,cAAA,KAAGG,UAAU,2BAA2BQ,QAAS,kBAtDlE,SAACC,GAChB,IAAMI,EAAc1C,EAAM2C,QAAO,SAAC/B,GAC9B,OAAOA,EAAQC,KAAOyB,KAG1BrC,EAASyC,GAiD8EE,CAAWhC,EAAQC,YALnDD,EAAQC,SAcnDa,cAAA,OAAKG,UAAU,YAAWD,SACtBF,cAAA,UAAQG,UAAU,eAAe,oBAAkB,aACnDQ,QAtDF,SAACC,GAEfrC,EAAS,KAoD0B2B,SACfF,cAAA,QAAAE,SAAM,2BCzHnBiB,EARH,WACV,OACEnB,cAAAC,WAAA,CAAAC,SACEF,cAACzC,EAAI,OCMI6D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,OCDdS,IAASC,OACP/B,cAACgC,IAAMC,WAAU,CAAA/B,SACfF,cAACmB,EAAG,MAENe,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.80f21afe.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react'\r\nimport './todo.css'\r\n\r\n// To get items from local storage back\r\n\r\nconst getLocalData =() =>{\r\n    const lists = localStorage.getItem(\"mytodolist\")\r\n\r\n    if(lists)\r\n    {\r\n        return JSON.parse(lists) //JSon.parse is used to get data on array.\r\n    }\r\n    else{\r\n        return[];\r\n    }\r\n}\r\n\r\nconst Todo = () => {\r\n    const [data, setData] = useState(\"\") //for add items.\r\n    const [items, setItems] = useState(getLocalData()) //To add items without deleting the previous one unless user delete it.\r\n                                              // getliocaldata is used to get the data.\r\n    const [isEditItem, setIsEditItem] = useState(\"\");\r\n    const [toggleButton, setToggleButton] = useState(false);\r\n\r\n\r\n\r\n    const addItem = () => {                  // add the items function\r\n        if (!data) {\r\n            alert(\"please fill something\")\r\n        }\r\n        else if (data && toggleButton) {\r\n            setItems(\r\n              items.map((curElem) => {\r\n                if (curElem.id === isEditItem) {\r\n                  return { ...curElem, name: data };\r\n                }\r\n                return curElem;\r\n              })\r\n            );\r\n      \r\n            setData(\"\");\r\n            setIsEditItem(null);\r\n            setToggleButton(false);\r\n        }\r\n        else {\r\n            const newData = {\r\n                id: new Date().getTime().toString(),\r\n                name: data,\r\n            }\r\n            setItems([...items, newData])   /// ... is a spread operator. It means that the data \r\n            setData(\"\");                    //  of previous state should be include and data= what are the data? \r\n        }\r\n    }\r\n    //To edit the items\r\n    const editItem = (index) => {\r\n        const item_todo_edited = items.find((curElem) => {\r\n          return curElem.id === index; //matching the curelem id from localstorage to index\r\n        });\r\n        setData(item_todo_edited.name); //to place the data got after matching in placeholder (to show name)\r\n        setIsEditItem(index);\r\n        setToggleButton(true);\r\n      };\r\n\r\n    \r\n    //to delete items\r\n\r\n    const deleteItem = (index) => {\r\n        const updatedItem = items.filter((curElem) => {\r\n            return curElem.id !== index;\r\n\r\n        });\r\n        setItems(updatedItem)\r\n\r\n    }\r\n\r\n    // to remove all items\r\n\r\n    const removeAll = (index)=>\r\n    {\r\n        setItems([])\r\n    }\r\n\r\n    // to add items on local storage\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"mytodolist\", JSON.stringify(items )) // mytodolist = key and items=value but items is array and we\r\n                                                    // need to pass string so we will use Json.stringify\r\n    }, [items])  //When the values of items are changed then useEffect will run \r\n                      // and data will be added in localstorage(it will on the key value pair and only string can be pass)\r\n\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"main-div\">\r\n                <div className=\"child-div\">\r\n                    <h1> Todo List </h1>\r\n                    <div className=\"addItems\">\r\n                        <input type=\"text\"\r\n                            placeholder=\"Add items\" className=\"form-control\"\r\n                            value={data}  // data is empty at first, since useState(\"its empty in above code\"), its initial data\r\n                            onChange={(event) => {\r\n                                setData(event.target.value) //event.target.value = text entered in the search input/\r\n\r\n                            }} />\r\n                            {toggleButton ? ( <i className=\"far fa-edit add-btn\" onClick={addItem}></i> )\r\n                                        :  (  <i className=\"fa fa-plus add-btn\" onClick={addItem}></i> )\r\n                        }\r\n                      \r\n                    </div>\r\n\r\n                   { /* showing items */  }\r\n\r\n                    <div className=\"showItems\">\r\n                        {items.map((curElem) => {\r\n                            return (\r\n                                <div className=\"eachItem\" key={curElem.id}>\r\n                                    <h3>{curElem.name}</h3>\r\n                                    <div className=\"todo-btn\">\r\n                                        <i className=\"far fa-edit add-btn\" \r\n                                         onClick={() => editItem(curElem.id)}></i>\r\n                                        <i className=\"far fa-trash-alt add-btn\" onClick={() => deleteItem(curElem.id)}>\r\n                                        </i>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n\r\n                        })}\r\n\r\n                    </div>\r\n                    <div className=\"showItems\">\r\n                        <button className=\"btn effect04\" data-sm-link-text=\"Remove all\"\r\n                        onClick={removeAll}>\r\n                            <span>CHECK LIST</span></button>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Todo from './component/Todo'\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Todo />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}